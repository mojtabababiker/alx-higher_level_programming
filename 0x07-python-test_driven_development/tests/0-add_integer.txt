"""
=============================
 This is a test suit for the
    0-add_integer.py task
=============================

>>> add_integer = __import__("0-add_integer").add_integer

    /add_integer takes two integers or flaot(casted to int)
         and return the sum of those two number/

]normal test case(two ints)
>>> add_integer(232, -2)
230

]normal test case(int and float)
>>> add_integer(20, 55.49)
75

]upnormal test case(int, str)
>>> add_integer(20, 'five') #doctest: +ELLIPSIS
Traceback (most recent call last):
...
TypeError: b must be an integer

]upnormal test case(tuple, int)
>>> add_integer((2, 3), 20) #doctest: +ELLIPSIS
Traceback (most recent call last):
...
TypeError: a must be an integer

]upnormal case
>>> add_integer(float('NaN')) #doctest: +ELLIPSIS +IGNORE_EXCEPTION_DETAIL
Traceback (most recent call last):
...
TypeError:
>>> add_integer(float("inf")) #doctest: +ELLIPSIS +IGNORE_EXCEPTION_DETAIL
Traceback (most recent call last):
...
TypeError:
>>> add_integer(4, float('NaN')) #doctest: +ELLIPSIS +IGNORE_EXCEPTION_DETAIL
Traceback (most recent call last):
...
TypeError:
>>> add_integer(4, float("inf")) #doctest: +ELLIPSIS +IGNORE_EXCEPTION_DETAIL
Traceback (most recent call last):
...
TypeError:

>>> add_integer(-float("inf"), -10) #dectest: +ELLIPSIS +IGNORE_EXCEPTION_DETAIL
Traceback (most recent call last):
...
TypeError:

>>> add_integer(-10, -float("inf")) #dectest: +ELLIPSIS +IGNORE_EXCEPTION_DETAIL
Traceback (most recent call last):
...
TypeError:


"""
